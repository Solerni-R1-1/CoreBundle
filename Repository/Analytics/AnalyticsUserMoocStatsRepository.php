<?php

namespace Claroline\CoreBundle\Repository\Analytics;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Session\Session;
use Claroline\CoreBundle\Entity\Workspace\AbstractWorkspace;
use Claroline\CoreBundle\Entity\User;
use Claroline\CoreBundle\Entity\Mooc\Mooc;
use Claroline\CoreBundle\Entity\Mooc\MoocSession;
use Claroline\CoreBundle\Entity\Analytics\AnalyticsUserMoocStats;

/**
 * AnalyticsUserMoocStatsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnalyticsUserMoocStatsRepository extends EntityRepository {
	
	public function countActiveUsersSince(MoocSession $session, $nbDays) {
		$date = new \DateTime("today midnight");
		$date->sub(new \DateInterval("P".$nbDays."D"));
		$dql = "SELECT COUNT(DISTINCT aums.user)
				FROM Claroline\CoreBundle\Entity\Analytics\AnalyticsUserMoocStats aums
				WHERE aums.workspace = :workspace
				AND aums.date >= :date
				AND aums.nbActivity > 0";
		
		$query = $this->_em->createQuery($dql);
		$query->setParameters(array(
				"workspace" => $session->getMooc()->getWorkspace(),
				"date"		=> $date
		));
		
		return $query->getSingleScalarResult();
	}
	
	public function getUsersActivity(MoocSession $moocSession, array $userIds, $limit = 0) {
		$workspace = $moocSession->getMooc()->getWorkspace();
		$from = $moocSession->getStartDate();
		$to = $moocSession->getEndDate();
		
		$dql = "SELECT
					u.firstName as firstname,
					u.lastName as lastname,
					u.username as username,
					u.mail as mail, 
					SUM(CASE WHEN
								aums IS NOT NULL
							AND aums.workspace = :workspace
							AND aums.date >= :from
							AND aums.date <= :to
						THEN aums.nbActivity
						ELSE 0 END) as nbLogs
				FROM Claroline\CoreBundle\Entity\User u
				LEFT JOIN Claroline\CoreBundle\Entity\Analytics\AnalyticsUserMoocStats aums
					WITH aums.user = u 
				WHERE 
					u.id IN (:userIds)
				GROUP BY u
				ORDER BY nbLogs DESC";
		
		$query = $this->_em->createQuery($dql);
		$query->setParameters(array(
				"workspace" => $workspace,
				"from"		=> $from,
				"to"		=> $to,
				"userIds"	=> $userIds
		));
		
		if ($limit != 0) {
			$query->setMaxResults($limit);
		}
		
		return $query->getResult();
	}
	
	public function countTotalForumMessagesForSession(MoocSession $moocSession) {
		$workspace = $moocSession->getMooc()->getWorkspace();
		$from = $moocSession->getStartDate();
		$to = $moocSession->getEndDate();
		
		$dql = "SELECT SUM(aums.nbPublicationsForum)
				FROM Claroline\CoreBundle\Entity\Analytics\AnalyticsUserMoocStats aums
				WHERE aums.workspace = :workspace
				AND aums.date >= :from
				AND aums.date <= :to";
		

		$query = $this->_em->createQuery($dql);
		$query->setParameters(array(
				"workspace" => $workspace,
				"from"		=> $from,
				"to"		=> $to
		));
		
		return $query->getSingleScalarResult();
	}
	


	public function countAverageForumMessagesForSession(MoocSession $moocSession) {
		$workspace = $moocSession->getMooc()->getWorkspace();
		$from = $moocSession->getStartDate();
		$to = $moocSession->getEndDate();
	
		$dql = "SELECT AVG(aums.nbPublicationsForum)
				FROM Claroline\CoreBundle\Entity\Analytics\AnalyticsUserMoocStats aums
				WHERE aums.workspace = :workspace
				AND aums.date >= :from
				AND aums.date <= :to";
	
		$query = $this->_em->createQuery($dql);
		$query->setParameters(array(
				"workspace" => $workspace,
				"from"		=> $from,
				"to"		=> $to
		));
	
		return $query->getSingleScalarResult();
	}

	public function countDailyForumMessagesForSession(MoocSession $moocSession) {
		$workspace = $moocSession->getMooc()->getWorkspace();
		$from = $moocSession->getStartDate();
		$to = $moocSession->getEndDate();
	
		$dql = "SELECT
					SUM(aums.nbPublicationsForum) AS nbPublicationsForum,
					aums.date AS date
				FROM Claroline\CoreBundle\Entity\Analytics\AnalyticsUserMoocStats aums
				WHERE aums.workspace = :workspace
				AND aums.date >= :from
				AND aums.date <= :to
				GROUP BY aums.date
				ORDER BY aums.date";
	
	
		$query = $this->_em->createQuery($dql);
		$query->setParameters(array(
				"workspace" => $workspace,
				"from"		=> $from,
				"to"		=> $to
		));
	
		return $query->getResult();
	}

	public function countForumMessagesForSessionByUsers(MoocSession $moocSession, array $userIds, $limit = 0) {
		$workspace = $moocSession->getMooc()->getWorkspace();
		$from = $moocSession->getStartDate();
		$to = $moocSession->getEndDate();
		
		$dql = "SELECT
					u.firstName as firstname,
					u.lastName as lastname,
					u.username as username,
					u.mail as mail,
					SUM(CASE WHEN
							aums IS NOT NULL
							AND aums.workspace = :workspace
							AND aums.date >= :from
							AND aums.date <= :to
						THEN aums.nbPublicationsForum
						ELSE 0 END) as nbPublicationsForum
				FROM Claroline\CoreBundle\Entity\User u
				LEFT JOIN Claroline\CoreBundle\Entity\Analytics\AnalyticsUserMoocStats aums
					WITH aums.user = u
				WHERE
					u IN (:userIds)
				GROUP BY u
				ORDER BY nbPublicationsForum DESC";
		
		$query = $this->_em->createQuery($dql);
		$query->setParameters(array(
				"workspace" => $workspace,
				"from"		=> $from,
				"to"		=> $to,
				"userIds"	=> $userIds
		));
		
		if ($limit > 0) {
			$query->setMaxResults($limit);
		}
		
		return $query->getResult();
	}
}
