<?php

namespace Claroline\CoreBundle\Repository\Mooc;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Claroline\CoreBundle\Entity\Mooc\MoocAccessConstraints;
use Claroline\CoreBundle\Entity\User;
use Claroline\CoreBundle\Entity\Workspace\AbstractWorkspace;

/**
 * MoocSessionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SessionsByUsersRepository extends EntityRepository
{

	/**
	 *
	 *
	 * @param moocAccessConstraints
	 * @param user
	 *
	 * @return integer number of entity deleted
	 *
	 **/
	public function deleteByConstraintIdAndUserId(MoocAccessConstraints $moocAccessConstraints = null, User $user = null) {

		$qb = $this->_em->createQueryBuilder();
		$qb->delete('ClarolineCoreBundle:Mooc\SessionsByUsers', 's');

		if($moocAccessConstraints != null){
			$qb->andWhere($qb->expr()->eq('s.moocAccessConstraints', ':moocAccessConstraints'));
			$qb->setParameter(':moocAccessConstraints', $moocAccessConstraints);
		}

		if($user != null){
			$qb->andWhere($qb->expr()->eq('s.user', ':user'));
			$qb->setParameter(':user', $user);
		}
		$query = $qb->getQuery();

		$numDeleted = $query->execute();

		return $numDeleted;
	}

	/**
	 *
	 *
	 * @param AbstractWorkspace
	 *
	 * @return integer number of entity deleted
	 *
	 **/
	public function deleteAllByWorkspace(AbstractWorkspace $workspace) {
		$qb = $this->_em->createQueryBuilder();
		$qb->delete('ClarolineCoreBundle:Mooc\SessionsByUsers', 's');
		
		$sessionsIds[] = array();
		foreach ($workspace->getMooc()->getMoocSessions() as $session) {
			$sessionsIds[] = $session->getId();
		}
		
		
		$qb->where('s.moocSession IN (:sessionsIds)');
		$qb->setParameter('sessionsIds', $sessionsIds);
		$qb->getQuery()->execute();
	}
}
